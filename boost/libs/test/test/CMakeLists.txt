# Copyright 2017, Raffi Enficiaud

# Use, modification, and distribution are subject to the
# Boost Software License, Version 1.0. (See accompanying file
# LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# See http://www.boost.org/libs/test for the library home page.

# This cmake file defines the tests of the boost.test library
# It is not meant to be included independently of the boost superproject cmake.

project(boost.test.test)

if(NOT (TARGET boost::test))
  message(FATAL_ERROR "This cmake file can only be included after the boost::test:build component")
endif()


# Variables that applies to all
set(BOOST_TEST_UNITTESTS_FOLDER ${CMAKE_CURRENT_LIST_DIR})
set(BOOST_TEST_TARGET_PREFIX_NAME "${BOOST_CURRENT_PACKAGE}_${BOOST_CURRENT_COMPONENT}")      # prefix for each test name
set(BOOST_TEST_TEST_PREFIX_NAME "${BOOST_CURRENT_PACKAGE}-${BOOST_CURRENT_COMPONENT}")      # prefix for each test name
set(BOOST_TEST_FOLDER_IDE "${BOOST_CURRENT_PACKAGE}/${BOOST_CURRENT_COMPONENT}")              # folder in the IDE


add_definitions(-DBOOST_ALL_NO_LIB)


#
# Adding documentation tests
file(GLOB_RECURSE
     BOOST_UTF_DOC_EXAMPLES
     ${BOOST_TEST_UNITTESTS_FOLDER}/../doc/examples/*.cpp)

foreach(_h IN LISTS BOOST_UTF_DOC_EXAMPLES)
  get_filename_component(_hh ${_h} NAME_WE)
  set(_current_target ${BOOST_TEST_TARGET_PREFIX_NAME}-doc-${_hh})
  set(_current_target_test ${BOOST_TEST_TEST_PREFIX_NAME}-doc-${_hh})

  add_executable(${_current_target} 
    ${_h} 
    ../doc/examples/${_hh}.output # this file is the output, it is currently not autogenerated
  )
  target_compile_features(${_current_target} PUBLIC cxx_std_11)
  target_link_libraries(${_current_target}
    PRIVATE  boost::${BOOST_CURRENT_PACKAGE}::header)
  set_target_properties(${_current_target}
    PROPERTIES 
      FOLDER "${BOOST_TEST_FOLDER_IDE}/Doc examples")

  add_test(NAME ${_current_target_test}
           COMMAND ${_current_target} )

  # depending on the name of the source file, the test should fail or not.
  get_filename_component(_ext ${_h} EXT)
  string(FIND ${_ext} "fail" _index_fail)
  if(${_index_fail} GREATER -1)
    set_tests_properties(${_current_target_test} PROPERTIES WILL_FAIL TRUE)
  endif()
endforeach()

# some specific targets needing specific things
target_link_libraries(${BOOST_TEST_TARGET_PREFIX_NAME}-doc-tolerance_04 PRIVATE boost::rational)



# datasets
file(GLOB
     BOOST_TEST_UNITTESTS_DATASET
     ${BOOST_TEST_UNITTESTS_FOLDER}/test-organization-ts/datasets-test/*.cpp
     ${BOOST_TEST_UNITTESTS_FOLDER}/test-organization-ts/datasets-test/*.hpp)
add_executable(
     ${BOOST_TEST_TARGET_PREFIX_NAME}-datasets ${BOOST_TEST_UNITTESTS_DATASET})
target_compile_features(${BOOST_TEST_TARGET_PREFIX_NAME}-datasets PUBLIC cxx_std_11)
target_link_libraries(${BOOST_TEST_TARGET_PREFIX_NAME}-datasets boost::test boost::optional)
set_target_properties(${BOOST_TEST_TARGET_PREFIX_NAME}-datasets 
  PROPERTIES 
    FOLDER "${BOOST_TEST_FOLDER_IDE}/Unit tests")
add_test(NAME ${BOOST_TEST_TEST_PREFIX_NAME}-datasets
         COMMAND ${BOOST_TEST_TARGET_PREFIX_NAME}-datasets)


####
# Various test suites
# we create one dummy test per fixture to group the execution on fixtures

set(BOOST_UTF_TESTS_IND_FILES
    writing-test-ts
    execution_monitor-ts
    framework-ts
    usage-variants-ts
    utils-ts
    test-organization-ts
    smoke-ts
  )

foreach(_ts IN LISTS BOOST_UTF_TESTS_IND_FILES)
  file(GLOB
       _boost_utf_current_tsuite
       RELATIVE ${BOOST_TEST_UNITTESTS_FOLDER}
       CONFIGURE_DEPENDS
       ${BOOST_TEST_UNITTESTS_FOLDER}/${_ts}/*.cpp
       )


  foreach(_h IN LISTS _boost_utf_current_tsuite)
    get_filename_component(_name ${_h} NAME_WE)
    set(_current_target ${BOOST_TEST_TEST_PREFIX_NAME}-${_ts}-${_name})
    set(_current_test_name ${BOOST_TEST_TEST_PREFIX_NAME}-${_ts}-${_name})

    add_executable(${_current_target} ${BOOST_TEST_UNITTESTS_FOLDER}/${_h})
    target_link_libraries(${_current_target} PRIVATE boost::test)
    set_target_properties(${_current_target} PROPERTIES FOLDER "${BOOST_TEST_FOLDER_IDE}/Unit tests/${_ts}")
    add_test(NAME ${_current_test_name}
             COMMAND ${_current_test_name})

    set_tests_properties(${_current_test_name} PROPERTIES FIXTURES_SETUP ${_ts}-fixture)
  endforeach()

  add_test(NAME ${BOOST_TEST_TEST_PREFIX_NAME}-${_ts} COMMAND ${CMAKE_EXECUTABLE} -E echo "Tests in fixture ${_ts} passed")
  set_tests_properties(${BOOST_TEST_TEST_PREFIX_NAME}-${_ts}   PROPERTIES FIXTURES_REQUIRES    ${_ts}-fixture)

  unset(_boost_utf_current_tsuite)

endforeach() # test suite

# targets specific needs
target_link_libraries(test-test-writing-test-ts-fp-multiprecision-comparison-test 
  PRIVATE 
    boost::multiprecision
    boost::lexical_cast # should be provided by multiprecision
    boost::atomic # should be provided by multiprecision
    boost::fusion # should be provided by multiprecision
    boost::typeof # should be provided by multiprecision
  )


# build all target
get_directory_property(all_test_targets BUILDSYSTEM_TARGETS)
add_custom_target(
  ${BOOST_CURRENT_PACKAGE}_${BOOST_CURRENT_COMPONENT}-all
  COMMAND ${CMAKE_EXECUTABLE} -E echo "All tests in ${BOOST_TEST_TEST_PREFIX_NAME} passed"
  DEPENDS ${all_test_targets})
  
# run all tests
get_directory_property(all_test_commands TESTS)
add_test(
  NAME ${BOOST_TEST_TEST_PREFIX_NAME}-all
  COMMAND ${BOOST_CURRENT_PACKAGE}_${BOOST_CURRENT_COMPONENT}-all)
set_tests_properties(${all_test_commands} PROPERTIES FIXTURES_SETUP ${BOOST_CURRENT_COMPONENT}-all-fixture)
set_tests_properties(${BOOST_TEST_TEST_PREFIX_NAME}-all   PROPERTIES FIXTURES_REQUIRES    ${BOOST_CURRENT_COMPONENT}-all-fixture)

# label all tests
set_tests_properties(${all_test_commands} ${BOOST_TEST_TEST_PREFIX_NAME}-all PROPERTIES LABELS "run-${BOOST_CURRENT_PACKAGE}-tests")
